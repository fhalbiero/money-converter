{"version":3,"sources":["CurrencyRow.js","App.js","index.js"],"names":["CurrencyRow","currencyOptions","selectedCurrency","onChangeCurrency","amount","onChangeAmount","className","value","onChange","map","option","key","type","BASE_URL","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","isAmountInFromCurrency","setIsAmountInFromCurrency","useEffect","fetch","then","res","json","data","rates","firstCurrency","Object","keys","base","e","target","onClick","holdingFromCurrency","ReactDOM","render","document","getElementById"],"mappings":"kMAGe,SAASA,EAAT,GAKQ,IAJnBC,EAIkB,EAJlBA,gBACAC,EAGkB,EAHlBA,iBACAC,EAEkB,EAFlBA,iBACAC,EACkB,EADlBA,OACAC,EAAkB,EAAlBA,eAEA,OACI,yBAAKC,UAAU,aAEX,4BACIC,MAAOL,EACPM,SAAUL,GAGNF,EAAgBQ,KAAK,SAAAC,GAAM,OACvB,4BACIJ,UAAU,SACVK,IAAKD,EACLH,MAAOG,GACTA,OAMd,2BACIE,KAAK,SACLN,UAAU,QACVC,MAAOH,EACPI,SAAUH,KC3B1B,IAAMQ,EAAW,yCA2FFC,MAzFf,WAAgB,IASVC,EAAUC,EATD,EAEmCC,mBAAS,IAF5C,mBAELhB,EAFK,KAEYiB,EAFZ,OAG6BD,qBAH7B,mBAGLE,EAHK,KAGSC,EAHT,OAIyBH,qBAJzB,mBAILI,EAJK,KAIOC,EAJP,OAK6BL,qBAL7B,mBAKLM,EALK,KAKSC,EALT,OAMiBP,mBAAS,GAN1B,mBAMLb,EANK,KAMGqB,EANH,OAOiDR,oBAAS,GAP1D,mBAOLS,EAPK,KAOmBC,EAPnB,KA6Db,OAlDID,GAEFV,EAAaZ,EACbW,EAAWX,EAASmB,IAEpBR,EAAWX,EACXY,EAAaZ,EAASmB,GAmBxBK,qBAAU,WAGJT,GAAgBE,GAClBQ,MAAM,GAAD,OAAIhB,EAAJ,iBAAqBM,EAArB,oBAA6CE,IAC7CS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJT,EAAgBS,EAAKC,MAAMb,SAIlC,CAACF,EAAcE,IAElBO,qBAAU,WACRC,MAAMhB,GACDiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,IAAME,EAAgBC,OAAOC,KAAKJ,EAAKC,OAAO,GAC9ChB,EAAmB,CAACe,EAAKK,MAAP,mBAAgBF,OAAOC,KAAKJ,EAAKC,UACnDd,EAAgBa,EAAKK,MACrBhB,EAAca,GACdX,EAAgBS,EAAKC,MAAMC,SAElC,IAGD,yBAAK7B,UAAU,YACb,4BAAI,qCAAJ,cACA,yBAAKA,UAAU,iBACb,kBAACN,EAAD,CACEC,gBAAiBA,EACjBC,iBAAkBiB,EAClBhB,iBAAkB,SAAAoC,GAAC,OAAInB,EAAgBmB,EAAEC,OAAOjC,QAChDH,OAAQY,EACRX,eAlDR,SAAgCkC,GAC7Bd,EAAUc,EAAEC,OAAOjC,OACnBoB,GAA0B,MAkDvB,yBAAKrB,UAAU,UACX,0BAAMmC,QA3ChB,WACG,IAAMC,EAAsBvB,EAC5BC,EAAgBC,GAChBC,EAAcoB,KAyCL,kBAAC,IAAD,CAAepC,UAAU,WAG/B,kBAACN,EAAD,CACEC,gBAAiBA,EACjBC,iBAAkBmB,EAClBlB,iBAAkB,SAAAoC,GAAC,OAAIjB,EAAciB,EAAEC,OAAOjC,QAC9CH,OAAQW,EACRV,eAzDR,SAA8BkC,GAC3Bd,EAAUc,EAAEC,OAAOjC,OACnBoB,GAA0B,SC/B/BgB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.15788f83.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport default function CurrencyRow({ \r\n    currencyOptions, \r\n    selectedCurrency, \r\n    onChangeCurrency, \r\n    amount,\r\n    onChangeAmount }) {\r\n\r\n    return (\r\n        <div className=\"input-div\">\r\n\r\n            <select \r\n                value={selectedCurrency} \r\n                onChange={onChangeCurrency}\r\n            >\r\n                {\r\n                    currencyOptions.map( option => (\r\n                        <option \r\n                            className=\"option\"\r\n                            key={option} \r\n                            value={option}\r\n                        >{option}\r\n                        </option>\r\n                    ))\r\n                }\r\n            </select>\r\n\r\n            <input \r\n                type=\"number\" \r\n                className=\"input\" \r\n                value={amount}\r\n                onChange={onChangeAmount}\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport { FaExchangeAlt } from 'react-icons/fa';\nimport './App.css';\n\nimport CurrencyRow from './CurrencyRow';\n\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest';\n\nfunction App() {\n\n  const [ currencyOptions, setCurrencyOptions ] = useState([]);\n  const [ fromCurrency, setFromCurrency ] = useState();\n  const [ toCurrency, setToCurrency ] = useState();\n  const [ exchangeRate, setExchangeRate ] = useState();\n  const [ amount, setAmount ] = useState(1);\n  const [ isAmountInFromCurrency, setIsAmountInFromCurrency ] = useState(true);\n  \n  let toAmount, fromAmount;\n\n  if (isAmountInFromCurrency) {\n    //Number.parseFloat(amount).toFixed(4);\n    fromAmount = amount;\n    toAmount = amount * exchangeRate;\n  } else {\n    toAmount = amount;\n    fromAmount = amount * exchangeRate;\n  }\n\n  function handleFromAmountChange(e) {\n     setAmount(e.target.value);\n     setIsAmountInFromCurrency(true);\n  }\n\n  function handleToAmountChange(e) {\n     setAmount(e.target.value);\n     setIsAmountInFromCurrency(false);\n  }\n\n  function invertCurrency() {\n     const holdingFromCurrency = fromCurrency;\n     setFromCurrency(toCurrency);\n     setToCurrency(holdingFromCurrency);   \n  }\n\n  useEffect(() => {\n    //decided not store data.rates in an state \n    //because rates can change in minutes\n    if (fromCurrency && toCurrency) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n          .then(res => res.json())\n          .then(data => {\n            setExchangeRate(data.rates[toCurrency]);\n          })\n    }\n\n  }, [fromCurrency, toCurrency]);\n\n  useEffect(() => {\n    fetch(BASE_URL)\n        .then(res => res.json())\n        .then(data => {\n            const firstCurrency = Object.keys(data.rates)[0];\n            setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\n            setFromCurrency(data.base);\n            setToCurrency(firstCurrency);\n            setExchangeRate(data.rates[firstCurrency]);\n        });\n  }, []);\n\n  return (\n    <div className=\"main-div\">\n      <h1><span>$$$</span> Converter</h1>\n      <div className=\"secondary-div\">\n        <CurrencyRow \n          currencyOptions={currencyOptions}\n          selectedCurrency={fromCurrency}\n          onChangeCurrency={e => setFromCurrency(e.target.value)}\n          amount={fromAmount}\n          onChangeAmount={handleFromAmountChange}\n        />\n        <div className=\"iquals\">\n            <span onClick={invertCurrency} >\n              <FaExchangeAlt className=\"icon\"/>\n            </span>\n        </div>\n        <CurrencyRow \n          currencyOptions={currencyOptions}\n          selectedCurrency={toCurrency}\n          onChangeCurrency={e => setToCurrency(e.target.value)}\n          amount={toAmount}\n          onChangeAmount={handleToAmountChange}\n        />\n      </div>\n    </div>\n   );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}